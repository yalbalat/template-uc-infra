substitutions:
    _APPLY_CHANGES: 'false'
    _ENV: 'undefined'
    _REGION: 'undefined'
    _USECASE: 'undefined'
steps:
- id: 'context'
  name: 'alpine'
  entrypoint: 'sh'
  secretEnv: ['TF_CLOUD_CREDENTIALS']
  args:
  - '-c'
  - |
      echo "***********************"
      echo "project : $PROJECT_ID"
      echo "branch  : $BRANCH_NAME"
      echo "env     : ${_ENV}"
      echo "mode    : $([[ ${_APPLY_CHANGES} = 'true' ]] && echo 'LIVE' || echo 'DRY RUN')"
      echo "***********************"
      mkdir -p /config
      echo "$$TF_CLOUD_CREDENTIALS" >> /config/credentials.tfrc
      chmod 400 /config/credentials.tfrc
  volumes:
  - name: 'terraform'
    path: /config
- id: 'INFRA - [Terraform init + plan]'
  name: 'hashicorp/terraform:latest'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
      export TF_CLI_CONFIG_FILE=/config/credentials.tfrc
      cd iac/deploy-steps/1.infra/
      TF_IN_AUTOMATION=1 terraform init -backend-config=../vars/backend/${_ENV}.tfvars -input=false -no-color -upgrade
      TF_IN_AUTOMATION=1 terraform plan -var-file=../vars/tfvars/${_ENV}.tfvars -no-color -input=false -out changes.tfplan
  volumes:
  - name: 'terraform'
    path: /config
- id: 'INFRA - [Terraform apply]'
  name: 'hashicorp/terraform:latest'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
      if [ "${_APPLY_CHANGES}" = 'true' ]; then
        echo "*****************************************"
        echo "Applying changes on live environment"
        echo "*****************************************"
        cd iac/deploy-steps/1.infra/
        TF_IN_AUTOMATION=1 terraform apply -input=false -auto-approve changes.tfplan
      else
        echo "*****************************************"
        echo "Skipping apply (DRY RUN)"
        echo "*****************************************"
      fi
- id: 'DATAFORM - [Compile/Run + Check status]'
  name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
      if [ "${_APPLY_CHANGES}" = 'true' ]; then
        echo "*****************************************"
        echo "Running Dataform on live environment"
        echo "*****************************************"
        dataform_compile_only=false
      else
        echo "*****************************************"
        echo "DRY RUN : Compiling Dataform only"
        echo "*****************************************"
        dataform_compile_only=true
      fi

      gcloud workflows run dataform-executor-${_USECASE} \
        --project=${PROJECT_ID} \
        --location=${_REGION} \
        --data="{\"env\":\"${_ENV}\",
                 \"wait_for_dataform_status_check\":true,
                 \"git_commitish\":\"${BRANCH_NAME}\",
                 \"compile_only\":${dataform_compile_only}}" \
        > dataform-output.log

      expected_result="state: SUCCEEDED"
      actual_result="$(grep "state" dataform-output.log)"

      if [ "$expected_result" = "$actual_result" ]; then
        echo ""
        echo $(grep "result" dataform-output.log | sed 's/result: //' | tr -d '"')
      else
        echo ""
        echo "Dataform run failed ! Expected $expected_result / Actual $actual_result"
        echo "Please go to the Dataform UI for more details"
        echo "https://console.cloud.google.com/bigquery/dataform/locations/${_REGION}/repositories/${REPO_NAME}/details/workflows?project=${PROJECT_ID}"
        echo ""
        echo "*****************************************"
        echo "Dataform output"
        echo "*****************************************"
        cat dataform-output.log
        exit 1
      fi
- id: 'ACCESS MANAGMENT - [Terraform init + plan]'
  name: 'hashicorp/terraform:latest'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
      export TF_CLI_CONFIG_FILE=/config/credentials.tfrc
      cd iac/deploy-steps/2.accessmanagement/
      TF_IN_AUTOMATION=1 terraform init -backend-config=../vars/backend/${_ENV}.tfvars -input=false -no-color -upgrade
      TF_IN_AUTOMATION=1 terraform plan -var-file=../vars/tfvars/${_ENV}.tfvars -no-color -input=false -out changes.tfplan
  volumes:
  - name: 'terraform'
    path: /config
- id: 'ACCESS MANAGMENT - [Terraform apply]'
  name: 'hashicorp/terraform:latest'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
      if [ "${_APPLY_CHANGES}" = 'true' ]; then
        echo "*****************************************"
        echo "Applying changes on live environment"
        echo "*****************************************"
        cd iac/deploy-steps/2.accessmanagement/
        TF_IN_AUTOMATION=1 terraform apply -input=false -auto-approve changes.tfplan
      else
        echo "*****************************************"
        echo "Skipping apply (DRY RUN)"
        echo "*****************************************"
      fi
availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/terraform-cloud-credentials/versions/latest
    env: 'TF_CLOUD_CREDENTIALS'
logsBucket: "gs://${PROJECT_ID}-gcs-cloud-build-logs/"
options:
  logging: GCS_ONLY
